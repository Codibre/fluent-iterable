import * as f from './operators-types';

declare module './base' {
  interface FluentOperator {
    withIndex: f.WithIndexFunction;
    takeWhile: f.TakeWhileFunction;
    takeWhileAsync: f.AsyncTakeWhileFunction;
    take: f.TakeFunction;
    skipWhile: f.SkipWhileFunction;
    skipWhileAsync: f.AsyncSkipWhileFunction;
    skip: f.SkipFunction;
    map: f.MapFunction;
    mapAsync: f.AsyncMapFunction;
    filter: f.FilterFunction;
    filterAsync: f.AsyncFilterFunction;
    partition: f.PartitionFunction;
    append: f.AppendFunction;
    prepend: f.PrependFunction;
    concat: f.ConcatFunction;
    concatAsync: f.AsyncConcatFunction;
    repeat: f.RepeatFunction;
    flatten: f.FlattenFunction;
    flatMap: f.FlattenFunction;
    flattenAsync: f.AsyncFlattenFunction;
    flatMapAsync: f.AsyncFlattenFunction;
    sort: f.SortFunction;
    sortBy: f.SortByFunction;
    distinct: f.DistinctFunction;
    distinctAsync: f.AsyncDistinctFunction;
    isDistinct: f.IsDistinctFunction;
    isDistinctAsync: f.AsyncIsDistinctFunction;
    group: f.GroupFunction;
    groupAsync: f.AsyncGroupFunction;
    count: f.CountFunction;
    countAsync: f.AsyncCountFunction;
    first: f.FirstFunction;
    firstAsync: f.AsyncFirstFunction;
    last: f.LastFunction;
    lastAsync: f.AsyncLastFunction;
    reduceAndMap: f.ReduceAndMapFunction;
    reduceAndMapAsync: f.AsyncReduceAndMapFunction;
    reduce: f.ReduceFunction;
    reduceAsync: f.AsyncReduceFunction;
    all: f.AllFunction;
    allAsync: f.AsyncAllFunction;
    every: f.AllFunction;
    everyAsync: f.AsyncAllFunction;
    any: f.AnyFunction;
    anyAsync: f.AsyncAnyFunction;
    some: f.AnyFunction;
    someAsync: f.AsyncAnyFunction;
    contains: f.ContainsFunction;
    toArray: f.ToArrayFunction;
    toObject: f.ToObjectFunction;
    toObjectAsync: f.AsyncToObjectFunction;
    toAsync: f.ToAsyncFunction;
    forEach: f.ForEachFunction;
    forEachAsync: f.AsyncForEachFunction;
    execute: f.ExecuteFunction;
    executeAsync: f.AsyncExecuteFunction;
    join: f.JoinFunction;
    joinAsync: f.AsyncJoinFunction;
    sum: f.SumFunction;
    sumAsync: f.AsyncSumFunction;
    avg: f.AvgFunction;
    avgAsync: f.AsyncAvgFunction;
    top: f.TopFunction;
    topAsync: f.AsyncTopFunction;
    min: f.MinFunction;
    minAsync: f.AsyncMinFunction;
    max: f.MaxFunction;
    maxAsync: f.AsyncMaxFunction;
    hasExactly: f.HasExactlyFunction;
    hasLessThan: f.HasLessThanFunction;
    hasLessOrExactly: f.HasLessOrExactly;
    hasMoreThan: f.HasMoreThanFunction;
    hasMoreOrExactly: f.HasMoreOrExactlyFunction;
    waitAll: f.WaitAllFunction;
    combine: f.CombineFunction;
    combineAsync: f.AsyncCombineFunction;
    emit: f.EmitFunction;
    flatMerge: f.FlatMergeFunction;
    whenEmpty: f.WhenEmptyFunction;
    catch: f.CatchFunction;
    catchAsync: f.AsyncCatchFunction;
  }
}
